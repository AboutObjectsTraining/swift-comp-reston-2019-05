// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$sanitizedManagedObjectClassName$>.swift instead.

import Foundation
import CoreData
<$if hasCustomBaseCaseImport$>import <$baseClassImport$><$endif$>

<$if noninheritedFetchedProperties.@count > 0$>
public enum <$sanitizedManagedObjectClassName$>FetchedProperties: String {<$foreach FetchedProperty noninheritedFetchedProperties do$>
    case <$FetchedProperty.name$> = "<$FetchedProperty.name$>"<$endforeach do$>
}
<$endif$>

<$if hasCustomSuperentity $>
open class _<$sanitizedManagedObjectClassName$>: <$customSuperentity$>
{<$else$>
open class _<$sanitizedManagedObjectClassName$>: NSManagedObject
{
<$endif$> <$if noninheritedAttributes.@count > 0 || noninheritedRelationships.@count > 0$>
    public struct Keys {<$foreach Attribute noninheritedAttributes do$>
        public static let <$Attribute.name$> = "<$Attribute.name$>"<$endforeach do$><$foreach Relationship noninheritedRelationships do$>
        public static let <$Relationship.name$> = "<$Relationship.name$>"<$endforeach do$>
    }
<$endif$>

<$if hasUserInfoKeys && userInfoKeyValues.@count > 0$>
    public struct <$sanitizedManagedObjectClassName$>UserInfo {<$foreach UserInfo userInfoKeyValues do$>
        public static let <$UserInfo.key$> = "<$UserInfo.key$>"<$endforeach do$>
    }
<$endif$>

    <$if (hasCustomSuperclass || (hasCustomSuperentity && TemplateVar.overrideBaseClass))$>override <$endif$>open class var entityName: String { return "<$name$>" }
    open class var fetchRequest: NSFetchRequest<<$sanitizedManagedObjectClassName$>> { return NSFetchRequest(entityName: entityName) }

<$foreach Attribute noninheritedAttributes do$>
    @NSManaged open var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$else$>!<$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
    @NSManaged open var <$Relationship.name$>: <$Relationship.immutableCollectionClassName$>
<$else$>
    @NSManaged open var <$Relationship.name$>: <$Relationship.destinationEntity.sanitizedManagedObjectClassName$><$if Relationship.isOptional$>?<$endif$><$endif$><$endforeach do$>

    public required init(entity: NSEntityDescription, insertInto context: NSManagedObjectContext?) {
        super.init(entity: entity, insertInto: context)
    }

    public convenience init?(managedObjectContext: NSManagedObjectContext) {
        guard let entity = _<$sanitizedManagedObjectClassName$>.entity(managedObjectContext: managedObjectContext) else { return nil }
        self.init(entity: entity, insertInto: managedObjectContext)
    }

    <$if (hasCustomSuperclass || (hasCustomSuperentity && TemplateVar.overrideBaseClass))$>override <$endif$>open class func entity(managedObjectContext: NSManagedObjectContext) -> NSEntityDescription? {
        return NSEntityDescription.entity(forEntityName: entityName, in: managedObjectContext)
    }
}

<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
// MARK: Generated accessors for `<$Relationship.name$>`
extension _<$sanitizedManagedObjectClassName$> {
    @objc(insertObject:in<$Relationship.name.initialCapitalString$>AtIndex:)
    @NSManaged public func insertInto<$Relationship.name.initialCapitalString$>(_ value: <$Relationship.destinationEntity.sanitizedManagedObjectClassName$>, at idx: Int)

    @objc(removeObjectFrom<$Relationship.name.initialCapitalString$>AtIndex:)
    @NSManaged public func removeFrom<$Relationship.name.initialCapitalString$>(at idx: Int)

    @objc(insert<$Relationship.name.initialCapitalString$>:atIndexes:)
    @NSManaged public func insertInto<$Relationship.name.initialCapitalString$>(_ values: [<$Relationship.destinationEntity.sanitizedManagedObjectClassName$>], at indexes: NSIndexSet)

    @objc(remove<$Relationship.name.initialCapitalString$>AtIndexes:)
    @NSManaged public func removeFrom<$Relationship.name.initialCapitalString$>(at indexes: NSIndexSet)

    @objc(replaceObjectIn<$Relationship.name.initialCapitalString$>AtIndex:withObject:)
    @NSManaged public func replaceResources(at idx: Int, with value: <$Relationship.destinationEntity.sanitizedManagedObjectClassName$>)

    @objc(replace<$Relationship.name.initialCapitalString$>AtIndexes:with<$Relationship.name.initialCapitalString$>:)
    @NSManaged public func replaceResources(at indexes: NSIndexSet, with values: [<$Relationship.destinationEntity.sanitizedManagedObjectClassName$>])

    @objc(add<$Relationship.name.initialCapitalString$>Object:)
    @NSManaged public func addTo<$Relationship.name.initialCapitalString$>(_ value: <$Relationship.destinationEntity.sanitizedManagedObjectClassName$>)

    @objc(remove<$Relationship.name.initialCapitalString$>Object:)
    @NSManaged public func removeFrom<$Relationship.name.initialCapitalString$>(_ value: <$Relationship.destinationEntity.sanitizedManagedObjectClassName$>)

    @objc(add<$Relationship.name.initialCapitalString$>:)
    @NSManaged public func addTo<$Relationship.name.initialCapitalString$>(_ value: <$Relationship.immutableCollectionClassName$>)

    @objc(remove<$Relationship.name.initialCapitalString$>:)
    @NSManaged public func removeFrom<$Relationship.name.initialCapitalString$>(_ value: <$Relationship.immutableCollectionClassName$>)
}
<$endif$><$endforeach do$>


extension _<$sanitizedManagedObjectClassName$> {
<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> Any? {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> Any? {
        guard let psc = managedObjectContext.persistentStoreCoordinator else { return nil }
        let model = psc.managedObjectModel
		let substitutionVariables : [String : Any] = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
		            "<$Binding.name$>": <$Binding.name$>,
		<$endforeach do2$><$else$>:<$endif$>]

        guard let fetchRequest = model.fetchRequestFromTemplate(withName: "<$FetchRequest.name$>", substitutionVariables: substitutionVariables) else {
          assert(false, "Can't find fetch request named \"<$FetchRequest.name$>\".")
          return nil
        }

        var result: Any? = nil
        do {
            let results = try managedObjectContext.fetch(fetchRequest)
            switch results.count {
            case 0:
                // Nothing found matching the fetch request. That's cool, though: we'll just return nil.
                break
            case 1:
                result = results.first
            default:
                print("WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, \(results.count) found (substitutionVariables: \(substitutionVariables), results: \(results))")
            }

        } catch {
            print("Error executing fetch request: \(error)")
        }
        return result
    }
<$else$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> [Any]? {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> [Any]? {
        guard let psc = managedObjectContext.persistentStoreCoordinator else { return nil }
        let model = psc.managedObjectModel
        let substitutionVariables : [String : Any] = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$else$>:<$endif$>]

        guard let fetchRequest = model.fetchRequestFromTemplate(withName: "<$FetchRequest.name$>", substitutionVariables: substitutionVariables) else {
        	assert(false, "Can't find fetch request named \"<$FetchRequest.name$>\".")
		return nil
	}
        var results = Array<Any>()
        do {
             results = try managedObjectContext.fetch(fetchRequest)
        } catch {
          print("Error executing fetch request: \(error)")
        }

        return results
    }
<$endif$>
<$endforeach do$>
<$foreach FetchedProperty noninheritedFetchedProperties do$>
    @NSManaged open
    let <$FetchedProperty.name$>: [<$FetchedProperty.entity.sanitizedManagedObjectClassName$>]
<$endforeach do$>
}
